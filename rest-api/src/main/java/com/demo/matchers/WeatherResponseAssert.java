package com.demo.matchers;

import com.demo.responses.*;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link WeatherResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
public class WeatherResponseAssert extends AbstractAssert<WeatherResponseAssert, WeatherResponse> {

  /**
   * Creates a new <code>{@link WeatherResponseAssert}</code> to make assertions on actual WeatherResponse.
   * @param actual the WeatherResponse we want to make assertions on.
   */
  public WeatherResponseAssert(WeatherResponse actual) {
    super(actual, WeatherResponseAssert.class);
  }

  /**
   * An entry point for WeatherResponseAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myWeatherResponse)</code> and get specific assertion with code completion.
   * @param actual the WeatherResponse we want to make assertions on.
   * @return a new <code>{@link WeatherResponseAssert}</code>
   */
  public static WeatherResponseAssert assertThat(WeatherResponse actual) {
    return new WeatherResponseAssert(actual);
  }

  /**
   * Verifies that the actual WeatherResponse's base is equal to the given one.
   * @param base the given base to compare the actual WeatherResponse's base to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's base is not equal to the given one.
   */
  public WeatherResponseAssert hasBase(String base) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting base of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualBase = actual.getBase();
    if (!Objects.areEqual(actualBase, base)) {
      failWithMessage(assertjErrorMessage, actual, base, actualBase);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's clouds is equal to the given one.
   * @param clouds the given clouds to compare the actual WeatherResponse's clouds to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's clouds is not equal to the given one.
   */
  public WeatherResponseAssert hasClouds(Clouds clouds) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting clouds of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Clouds actualClouds = actual.getClouds();
    if (!Objects.areEqual(actualClouds, clouds)) {
      failWithMessage(assertjErrorMessage, actual, clouds, actualClouds);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's cod is equal to the given one.
   * @param cod the given cod to compare the actual WeatherResponse's cod to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's cod is not equal to the given one.
   */
  public WeatherResponseAssert hasCod(Integer cod) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cod of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualCod = actual.getCod();
    if (!Objects.areEqual(actualCod, cod)) {
      failWithMessage(assertjErrorMessage, actual, cod, actualCod);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's coord is equal to the given one.
   * @param coord the given coord to compare the actual WeatherResponse's coord to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's coord is not equal to the given one.
   */
  public WeatherResponseAssert hasCoord(Coord coord) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting coord of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Coord actualCoord = actual.getCoord();
    if (!Objects.areEqual(actualCoord, coord)) {
      failWithMessage(assertjErrorMessage, actual, coord, actualCoord);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's dt is equal to the given one.
   * @param dt the given dt to compare the actual WeatherResponse's dt to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's dt is not equal to the given one.
   */
  public WeatherResponseAssert hasDt(Integer dt) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting dt of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualDt = actual.getDt();
    if (!Objects.areEqual(actualDt, dt)) {
      failWithMessage(assertjErrorMessage, actual, dt, actualDt);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's id is equal to the given one.
   * @param id the given id to compare the actual WeatherResponse's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's id is not equal to the given one.
   */
  public WeatherResponseAssert hasId(Integer id) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's main is equal to the given one.
   * @param main the given main to compare the actual WeatherResponse's main to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's main is not equal to the given one.
   */
  public WeatherResponseAssert hasMain(Main main) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting main of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Main actualMain = actual.getMain();
    if (!Objects.areEqual(actualMain, main)) {
      failWithMessage(assertjErrorMessage, actual, main, actualMain);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's name is equal to the given one.
   * @param name the given name to compare the actual WeatherResponse's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's name is not equal to the given one.
   */
  public WeatherResponseAssert hasName(String name) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's sys is equal to the given one.
   * @param sys the given sys to compare the actual WeatherResponse's sys to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's sys is not equal to the given one.
   */
  public WeatherResponseAssert hasSys(Sys sys) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sys of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Sys actualSys = actual.getSys();
    if (!Objects.areEqual(actualSys, sys)) {
      failWithMessage(assertjErrorMessage, actual, sys, actualSys);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's visibility is equal to the given one.
   * @param visibility the given visibility to compare the actual WeatherResponse's visibility to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's visibility is not equal to the given one.
   */
  public WeatherResponseAssert hasVisibility(Integer visibility) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting visibility of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualVisibility = actual.getVisibility();
    if (!Objects.areEqual(actualVisibility, visibility)) {
      failWithMessage(assertjErrorMessage, actual, visibility, actualVisibility);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's weather contains the given Weather elements.
   * @param weather the given elements that should be contained in actual WeatherResponse's weather.
   * @return this assertion object.
   * @throws AssertionError if the actual WeatherResponse's weather does not contain all given Weather elements.
   */
  public WeatherResponseAssert hasWeather(Weather... weather) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // check that given Weather varargs is not null.
    if (weather == null) failWithMessage("Expecting weather parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getWeather(), weather);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's weather contains <b>only<b> the given Weather elements and nothing else in whatever order.
   * @param weather the given elements that should be contained in actual WeatherResponse's weather.
   * @return this assertion object.
   * @throws AssertionError if the actual WeatherResponse's weather does not contain all given Weather elements.
   */
  public WeatherResponseAssert hasOnlyWeather(Weather... weather) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // check that given Weather varargs is not null.
    if (weather == null) failWithMessage("Expecting weather parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getWeather(), weather);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse's weather does not contain the given Weather elements.
   *
   * @param weather the given elements that should not be in actual WeatherResponse's weather.
   * @return this assertion object.
   * @throws AssertionError if the actual WeatherResponse's weather contains any given Weather elements.
   */
  public WeatherResponseAssert doesNotHaveWeather(Weather... weather) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // check that given Weather varargs is not null.
    if (weather == null) failWithMessage("Expecting weather parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getWeather(), weather);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WeatherResponse has no weather.
   * @return this assertion object.
   * @throws AssertionError if the actual WeatherResponse's weather is not empty.
   */
  public WeatherResponseAssert hasNoWeather() {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have weather but had :\n  <%s>";
    
    // check
    if (actual.getWeather().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getWeather());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual WeatherResponse's wind is equal to the given one.
   * @param wind the given wind to compare the actual WeatherResponse's wind to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeatherResponse's wind is not equal to the given one.
   */
  public WeatherResponseAssert hasWind(Wind wind) {
    // check that actual WeatherResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting wind of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Wind actualWind = actual.getWind();
    if (!Objects.areEqual(actualWind, wind)) {
      failWithMessage(assertjErrorMessage, actual, wind, actualWind);
    }

    // return the current assertion for method chaining
    return this;
  }

}
