package com.demo.matchers;

import com.demo.model.*;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link WeatherResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
public class WeatherResponseAssert extends AbstractAssert<WeatherResponseAssert, WeatherResponse> {

    public WeatherResponseAssert(WeatherResponse actual) {
        super(actual, WeatherResponseAssert.class);
    }

    public static WeatherResponseAssert assertThat(WeatherResponse actual) {
        return new WeatherResponseAssert(actual);
    }

    public WeatherResponseAssert hasBase(String base) {
        isNotNull();
        String assertjErrorMessage = "\nExpecting base of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
        String actualBase = actual.getBase();
        if (!Objects.areEqual(actualBase, base)) {
            failWithMessage(assertjErrorMessage, actual, base, actualBase);
        }
        return this;
    }

    public WeatherResponseAssert hasClouds(Clouds clouds) {
        isNotNull();
        String assertjErrorMessage = "\nExpecting clouds of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
        Clouds actualClouds = actual.getClouds();
        if (!Objects.areEqual(actualClouds, clouds)) {
            failWithMessage(assertjErrorMessage, actual, clouds, actualClouds);
        }
        return this;
    }

    public WeatherResponseAssert hasCod(Integer cod) {
        isNotNull();
        String assertjErrorMessage = "\nExpecting cod of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
        Integer actualCod = actual.getCod();
        if (!Objects.areEqual(actualCod, cod)) failWithMessage(assertjErrorMessage, actual, cod, actualCod);
        return this;
    }

    public WeatherResponseAssert hasCoord(Coord coord) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting coord of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Coord actualCoord = actual.getCoord();
        if (!Objects.areEqual(actualCoord, coord)) {
            failWithMessage(assertjErrorMessage, actual, coord, actualCoord);
        }

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert hasDt(Integer dt) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting dt of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualDt = actual.getDt();
        if (!Objects.areEqual(actualDt, dt)) {
            failWithMessage(assertjErrorMessage, actual, dt, actualDt);
        }

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert hasId(Integer id) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualId = actual.getId();
        if (!Objects.areEqual(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert hasMain(Main main) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting main of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Main actualMain = actual.getMain();
        if (!Objects.areEqual(actualMain, main)) {
            failWithMessage(assertjErrorMessage, actual, main, actualMain);
        }

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert hasName(String name) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert hasSys(Sys sys) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting sys of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Sys actualSys = actual.getSys();
        if (!Objects.areEqual(actualSys, sys)) {
            failWithMessage(assertjErrorMessage, actual, sys, actualSys);
        }

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert hasVisibility(Integer visibility) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting visibility of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualVisibility = actual.getVisibility();
        if (!Objects.areEqual(actualVisibility, visibility)) {
            failWithMessage(assertjErrorMessage, actual, visibility, actualVisibility);
        }

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert hasWeather(Weather... weather) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // check that given Weather varargs is not null.
        if (weather == null) failWithMessage("Expecting weather parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getWeather(), weather);

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert hasOnlyWeather(Weather... weather) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // check that given Weather varargs is not null.
        if (weather == null) failWithMessage("Expecting weather parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getWeather(), weather);

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert doesNotHaveWeather(Weather... weather) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // check that given Weather varargs is not null.
        if (weather == null) failWithMessage("Expecting weather parameter not to be null.");

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getWeather(), weather);

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert hasNoWeather() {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have weather but had :\n  <%s>";

        // check
        if (actual.getWeather().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getWeather());
        }

        // return the current assertion for method chaining
        return this;
    }

    public WeatherResponseAssert hasWind(Wind wind) {
        // check that actual WeatherResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting wind of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Wind actualWind = actual.getWind();
        if (!Objects.areEqual(actualWind, wind)) {
            failWithMessage(assertjErrorMessage, actual, wind, actualWind);
        }

        // return the current assertion for method chaining
        return this;
    }

}
